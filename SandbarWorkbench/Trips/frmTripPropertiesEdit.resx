<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="tt.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACyWDkAu1s3ALllMQDUakEAvHI4ANZtQgC9czkAvXM7AMF3PQDTdVIA2XVSAG9ujgDPeF0AznlfANN/
        SwDPe2IAeHyHANWAZgCIfJAA0ohQANaLTQDbhGkA24lZAN2GZADcjU4A3I5LAOuHZADXj1MA0Y9aAPOM
        XwD1jGMAwY95AOiVXgDDlHQA4ZF4AOmScgCykocAlpWHAJOQmQDpm1kArZGQAJeUjwCglI4AoJaMAI+S
        oAD+l2oAzJl4AK6YhgCCk6YAqZSWALaXiACLlKEAgZKsALOXkACOlaQAl5KtALKYkQD/mnMAqJyKALyc
        hQCumZgA5ZmGALGZmQCpnZEAsZuWALWblQD+nXcAvJ6LAMefhgD3nnwAr56VAPqjawDAoIkAuZ+PALGe
        lgC9nJkAqKCTALOelgC8n5AA8p+AALuflACbnKoAwqGNAJyZuQC1opMA8p+JALCepQD5pnMAvaKYALqh
        nwC8o5kA/6V+AKukoQD/q28AxaqPALeqmgCmp6sAv6meAPqufgDPq5kA8aebAOynnQDVrJUAramvAL6r
        pADOrJwAyKuiAL+qqQCjqbYA/6+EAP+zegC/sZsApq6uAKiutQClq8IAv7KiALSzpQCuqckA27KcALGr
        wgC+q74A9K+gALmvtQDNsKsAq6+6AL2zqQC3srEA5bSkAP+7hADCta0Ax7atALuzvQDBssAAu7a3AM20
        uADHuqwA1LmvANe7qgDJvKwAz7ytAMu5ugDBvLkA/8SMAP+7qwDKucQAwby+AMy/sQC3vMUAyL+2AMbA
        tQDIvMIA2sCvAMq+vADOwbMA6MKqAM/CtADRv74AzsK2AMrBvQDAv8gA1sK3AMDCygD/y6UA18q6AMTC
        4AD/0Z4A4My7ANHH1AC6x90A9s6yAP/TqADTy9IA0c3MAOXNxwD/0bMA3tDEAL/O6ADZ0dgAxNLkAOTY
        xgDw1soA/NnFAMTV6ADu2NIA/+KvAP/fwgDt3dcA6d3dAPHh0AD/4c4A7uDiAPXi3wDz4uUA+eTjAPjn
        6gD+6t8A/+7ZAP/w3QD/7ekA6uz0AP/y3QD/99AA//XZAPfs/wD/9OUA6/H2AODw/wD99egA4/H/AP/0
        7gD58P8A//nqAP/57AD/+PEA+/X/APv2/wD//OoA9/f/APT4/wD//+QA9Pn/AP/5/wD//+sA//3zAP//
        7QD/+/sA///uAP/7/AD6+/8A///wAPH8/wD8/PwA///xAP/9+AD/+/8A//71AP//8gD//foA///0AP//
        9QDz/v8A///4AP/9/wD///kA//7+AP//+wD//v8A///+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAATWFJQ0g7Uk5YQDwxPllBNUrD7JfI4Im0t5zCwIzBxjhG78ym5dOgurt6q7GWvr9oK52bmYd9
        noWhECxRJpGYKiXv7HTx9XDwzjC2sjPN9ylM78+V9edx5tA0sKg2x/ZcUGqIrWtWp3ekC1M3EpCGKCTu
        63vh6oTS13XWy3jd40tU1O6C8/Rn5Nxy2tmD8tFaX3OKoz+UrGCTbHyffoGLLzqzxW/EvJLf6Y3t1a/l
        3l4yvbWaqcpE3uJp6Nh229suZXk9Ik8XRSMVEQ8NDAAJAWSPVa5CbR0tHlsaCqI5AwV/H7nJYoBuXUcg
        Vxa4pQ4CY2YhqhwbJxkYFAgTjgcGBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>